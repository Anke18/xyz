import _xyz_map from './_xyz_map.mjs';

export default layer => {

    // // Create XHR for fetching data from middleware.
    // const xhr = new XMLHttpRequest();

    // // Get bounds for request.
    // const bounds = map.getBounds();

    // // Build XHR request.
    // xhr.open('GET', layer.host + '/api/layer/cluster?' + paramString({
    //     locale: layer.locale,
    //     layer: layer.key,
    //     table: layer.table,
    //     kmeans: layer.cluster_kmeans,// * window.devicePixelRatio,
    //     dbscan: layer.cluster_dbscan,// * window.devicePixelRatio,
    //     theme: layer.style.theme && layer.style.theme.type,
    //     west: bounds.getWest(),
    //     south: bounds.getSouth(),
    //     east: bounds.getEast(),
    //     north: bounds.getNorth()
    // }));

    // // Process XHR onload.
    // xhr.onload = e => {

    //     if (e.target.status !== 200) return alert('farts');

    //     const cluster = JSON.parse(e.target.response);

    //     const param = {
    //         max_size: cluster.reduce((max_size, f) => Math.max(max_size, f.properties.size), 0)
    //     };

    //     // Add cluster as point layer to Leaflet.
    //     L.geoJson(cluster, {
    //         pointToLayer: (point, latlng) => {

    //             param.marker = layer.style.marker;

    //             if (point.properties.size > 1) param.marker = layer.style.markerMulti;

    //             // Return marker if no theme is set.
    //             param.icon = svg_symbols(param.marker);

    //             // Define iconSize base on the point size in relation to the max_size.
    //             let iconSize = layer.cluster_logscale ?
    //                 layer.style.markerMin + layer.style.markerMax / Math.log(param.max_size) * Math.log(point.properties.size) :
    //                 point.properties.count === 1 ?
    //                     layer.style.markerMin :
    //                     layer.style.markerMin + layer.style.markerMax / param.max_size * point.properties.size;

    //             L.marker(latlng, {
    //                 zIndexOffset: parseInt(1000 - 1000 / param.max_size * point.properties.size),
    //                 icon: L.icon({
    //                     iconUrl: param.icon,
    //                     iconSize: iconSize
    //                 }),
    //                 interactive: false
    //             })


    //         }
    //     }).addTo(map);
    // }

    // xhr.send();

}